//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GridEditor"",
            ""id"": ""98d399d1-50c3-4c5d-a8d8-d8f410c90598"",
            ""actions"": [
                {
                    ""name"": ""ToggleModeStart"",
                    ""type"": ""Button"",
                    ""id"": ""99616ae3-29e7-4583-bf3b-3669c7b52cf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleModeEnd"",
                    ""type"": ""Button"",
                    ""id"": ""29463538-3b75-4a97-803e-d4d7b0241267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleModeObstacles"",
                    ""type"": ""Button"",
                    ""id"": ""0d819f18-ca6b-4909-bf2f-3dcb0a12e14e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeStateOfCell"",
                    ""type"": ""Button"",
                    ""id"": ""ea6f19d2-29a7-45fc-9a17-2470f8e0f6a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1234541c-2e0b-41b2-be23-37674174c913"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleModeStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42232ce6-e906-4b8f-9dea-371ac82e9a75"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleModeEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6a380f-4f7a-490a-9258-176e0b575061"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleModeObstacles"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fcacf0a-460d-44cc-8285-863fa98e8845"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeStateOfCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pathfinder"",
            ""id"": ""1709debc-4cb5-456f-a1b2-1437ace7d7fe"",
            ""actions"": [
                {
                    ""name"": ""ToggleRun"",
                    ""type"": ""Button"",
                    ""id"": ""460082d8-0efd-4f0b-b156-b028aecf63b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunIteration"",
                    ""type"": ""Button"",
                    ""id"": ""8e0b4895-881f-4301-9484-dbafcb37201d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""7c83d948-19b6-42c6-b951-efa62d56facd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextAlgorithm"",
                    ""type"": ""Button"",
                    ""id"": ""6ba102b2-9069-4b0a-ad49-2ee69cfb5fd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousAlgorithm"",
                    ""type"": ""Button"",
                    ""id"": ""17fb7110-a5ab-4fd8-96e7-a775efff7b10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abf27d2b-6500-4e9e-bdaf-adc2724717ab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleRun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23f17370-3074-47d8-8fb7-b147c1f73ad7"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunIteration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72def3d3-3513-45d5-8c4c-f88b2a585018"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a4dfef0-09e1-4218-8886-7c97a7ee5772"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextAlgorithm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e345d632-2c2b-4b86-b462-92efb653a7f0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousAlgorithm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GridEditor
        m_GridEditor = asset.FindActionMap("GridEditor", throwIfNotFound: true);
        m_GridEditor_ToggleModeStart = m_GridEditor.FindAction("ToggleModeStart", throwIfNotFound: true);
        m_GridEditor_ToggleModeEnd = m_GridEditor.FindAction("ToggleModeEnd", throwIfNotFound: true);
        m_GridEditor_ToggleModeObstacles = m_GridEditor.FindAction("ToggleModeObstacles", throwIfNotFound: true);
        m_GridEditor_ChangeStateOfCell = m_GridEditor.FindAction("ChangeStateOfCell", throwIfNotFound: true);
        // Pathfinder
        m_Pathfinder = asset.FindActionMap("Pathfinder", throwIfNotFound: true);
        m_Pathfinder_ToggleRun = m_Pathfinder.FindAction("ToggleRun", throwIfNotFound: true);
        m_Pathfinder_RunIteration = m_Pathfinder.FindAction("RunIteration", throwIfNotFound: true);
        m_Pathfinder_Reset = m_Pathfinder.FindAction("Reset", throwIfNotFound: true);
        m_Pathfinder_NextAlgorithm = m_Pathfinder.FindAction("NextAlgorithm", throwIfNotFound: true);
        m_Pathfinder_PreviousAlgorithm = m_Pathfinder.FindAction("PreviousAlgorithm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GridEditor
    private readonly InputActionMap m_GridEditor;
    private List<IGridEditorActions> m_GridEditorActionsCallbackInterfaces = new List<IGridEditorActions>();
    private readonly InputAction m_GridEditor_ToggleModeStart;
    private readonly InputAction m_GridEditor_ToggleModeEnd;
    private readonly InputAction m_GridEditor_ToggleModeObstacles;
    private readonly InputAction m_GridEditor_ChangeStateOfCell;
    public struct GridEditorActions
    {
        private @InputActions m_Wrapper;
        public GridEditorActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleModeStart => m_Wrapper.m_GridEditor_ToggleModeStart;
        public InputAction @ToggleModeEnd => m_Wrapper.m_GridEditor_ToggleModeEnd;
        public InputAction @ToggleModeObstacles => m_Wrapper.m_GridEditor_ToggleModeObstacles;
        public InputAction @ChangeStateOfCell => m_Wrapper.m_GridEditor_ChangeStateOfCell;
        public InputActionMap Get() { return m_Wrapper.m_GridEditor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridEditorActions set) { return set.Get(); }
        public void AddCallbacks(IGridEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_GridEditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GridEditorActionsCallbackInterfaces.Add(instance);
            @ToggleModeStart.started += instance.OnToggleModeStart;
            @ToggleModeStart.performed += instance.OnToggleModeStart;
            @ToggleModeStart.canceled += instance.OnToggleModeStart;
            @ToggleModeEnd.started += instance.OnToggleModeEnd;
            @ToggleModeEnd.performed += instance.OnToggleModeEnd;
            @ToggleModeEnd.canceled += instance.OnToggleModeEnd;
            @ToggleModeObstacles.started += instance.OnToggleModeObstacles;
            @ToggleModeObstacles.performed += instance.OnToggleModeObstacles;
            @ToggleModeObstacles.canceled += instance.OnToggleModeObstacles;
            @ChangeStateOfCell.started += instance.OnChangeStateOfCell;
            @ChangeStateOfCell.performed += instance.OnChangeStateOfCell;
            @ChangeStateOfCell.canceled += instance.OnChangeStateOfCell;
        }

        private void UnregisterCallbacks(IGridEditorActions instance)
        {
            @ToggleModeStart.started -= instance.OnToggleModeStart;
            @ToggleModeStart.performed -= instance.OnToggleModeStart;
            @ToggleModeStart.canceled -= instance.OnToggleModeStart;
            @ToggleModeEnd.started -= instance.OnToggleModeEnd;
            @ToggleModeEnd.performed -= instance.OnToggleModeEnd;
            @ToggleModeEnd.canceled -= instance.OnToggleModeEnd;
            @ToggleModeObstacles.started -= instance.OnToggleModeObstacles;
            @ToggleModeObstacles.performed -= instance.OnToggleModeObstacles;
            @ToggleModeObstacles.canceled -= instance.OnToggleModeObstacles;
            @ChangeStateOfCell.started -= instance.OnChangeStateOfCell;
            @ChangeStateOfCell.performed -= instance.OnChangeStateOfCell;
            @ChangeStateOfCell.canceled -= instance.OnChangeStateOfCell;
        }

        public void RemoveCallbacks(IGridEditorActions instance)
        {
            if (m_Wrapper.m_GridEditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGridEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_GridEditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GridEditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GridEditorActions @GridEditor => new GridEditorActions(this);

    // Pathfinder
    private readonly InputActionMap m_Pathfinder;
    private List<IPathfinderActions> m_PathfinderActionsCallbackInterfaces = new List<IPathfinderActions>();
    private readonly InputAction m_Pathfinder_ToggleRun;
    private readonly InputAction m_Pathfinder_RunIteration;
    private readonly InputAction m_Pathfinder_Reset;
    private readonly InputAction m_Pathfinder_NextAlgorithm;
    private readonly InputAction m_Pathfinder_PreviousAlgorithm;
    public struct PathfinderActions
    {
        private @InputActions m_Wrapper;
        public PathfinderActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleRun => m_Wrapper.m_Pathfinder_ToggleRun;
        public InputAction @RunIteration => m_Wrapper.m_Pathfinder_RunIteration;
        public InputAction @Reset => m_Wrapper.m_Pathfinder_Reset;
        public InputAction @NextAlgorithm => m_Wrapper.m_Pathfinder_NextAlgorithm;
        public InputAction @PreviousAlgorithm => m_Wrapper.m_Pathfinder_PreviousAlgorithm;
        public InputActionMap Get() { return m_Wrapper.m_Pathfinder; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PathfinderActions set) { return set.Get(); }
        public void AddCallbacks(IPathfinderActions instance)
        {
            if (instance == null || m_Wrapper.m_PathfinderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PathfinderActionsCallbackInterfaces.Add(instance);
            @ToggleRun.started += instance.OnToggleRun;
            @ToggleRun.performed += instance.OnToggleRun;
            @ToggleRun.canceled += instance.OnToggleRun;
            @RunIteration.started += instance.OnRunIteration;
            @RunIteration.performed += instance.OnRunIteration;
            @RunIteration.canceled += instance.OnRunIteration;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @NextAlgorithm.started += instance.OnNextAlgorithm;
            @NextAlgorithm.performed += instance.OnNextAlgorithm;
            @NextAlgorithm.canceled += instance.OnNextAlgorithm;
            @PreviousAlgorithm.started += instance.OnPreviousAlgorithm;
            @PreviousAlgorithm.performed += instance.OnPreviousAlgorithm;
            @PreviousAlgorithm.canceled += instance.OnPreviousAlgorithm;
        }

        private void UnregisterCallbacks(IPathfinderActions instance)
        {
            @ToggleRun.started -= instance.OnToggleRun;
            @ToggleRun.performed -= instance.OnToggleRun;
            @ToggleRun.canceled -= instance.OnToggleRun;
            @RunIteration.started -= instance.OnRunIteration;
            @RunIteration.performed -= instance.OnRunIteration;
            @RunIteration.canceled -= instance.OnRunIteration;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @NextAlgorithm.started -= instance.OnNextAlgorithm;
            @NextAlgorithm.performed -= instance.OnNextAlgorithm;
            @NextAlgorithm.canceled -= instance.OnNextAlgorithm;
            @PreviousAlgorithm.started -= instance.OnPreviousAlgorithm;
            @PreviousAlgorithm.performed -= instance.OnPreviousAlgorithm;
            @PreviousAlgorithm.canceled -= instance.OnPreviousAlgorithm;
        }

        public void RemoveCallbacks(IPathfinderActions instance)
        {
            if (m_Wrapper.m_PathfinderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPathfinderActions instance)
        {
            foreach (var item in m_Wrapper.m_PathfinderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PathfinderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PathfinderActions @Pathfinder => new PathfinderActions(this);
    public interface IGridEditorActions
    {
        void OnToggleModeStart(InputAction.CallbackContext context);
        void OnToggleModeEnd(InputAction.CallbackContext context);
        void OnToggleModeObstacles(InputAction.CallbackContext context);
        void OnChangeStateOfCell(InputAction.CallbackContext context);
    }
    public interface IPathfinderActions
    {
        void OnToggleRun(InputAction.CallbackContext context);
        void OnRunIteration(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnNextAlgorithm(InputAction.CallbackContext context);
        void OnPreviousAlgorithm(InputAction.CallbackContext context);
    }
}
